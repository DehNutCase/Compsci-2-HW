// 11.8.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"
#include <iostream>
#include "util.h"
#include <math.h>

/**
Merges two adjacent ranges in a vector
@param a the vector with the elements to merge
@param from the start of the first range
@param mid the end of the first range
@param to the end of the second range
*/
void merge(vector<int>& a, int from, int mid, int to)
{
	int n = to - from + 1; // Size of the range to be merged 
						   // Merge both halves into a temporary vector b 
	vector<int> b(n);

	int i1 = from;
	// Next element to consider in the first half 
	int i2 = mid + 1;
	// Next element to consider in the second half 
	int j = 0; // Next open position in b 

			   // As long as neither i1 nor i2 is past the end, move the smaller
			   // element into b

	while (i1 <= mid && i2 <= to)
	{
		if (a[i1] < a[i2])
		{
			b[j] = a[i1];
			i1++;
		}
		else
		{
			b[j] = a[i2];
			i2++;
		}
		j++;
	}

	// Note that only one of the two while loops below is executed

	// Copy any remaining entries of the first half
	while (i1 <= mid)
	{
		b[j] = a[i1];
		i1++;
		j++;
	}
	// Copy any remaining entries of the second half
	while (i2 <= to)
	{
		b[j] = a[i2];
		i2++;
		j++;
	}

	// Copy back from the temporary vector
	for (j = 0; j < n; j++)
		a[from + j] = b[j];
}

/**
Sorts the elements in a range of a vector.
@param a the vector with the elements to sort
@param from start of the range to sort
@param to end of the range to sort
*/
void merge_sort(vector<int>& a, int from, int to)
{
	if (from == to) return;
	int mid = (from + to) / 2;
	// Sort the first and the second half

	for (int i = 0; i < std::log2(a.size()); i++)
	{
		// i = 0,1,2
		//size = 2,4,8
		int size = std::pow(2, i + 1);
		for (size_t k = 0; k < a.size() / size; k++)
		{
			merge(a, k*size, k*size + size / 2 - 1, k*size + size - 1);
		}
	}
	merge(a, from, mid, to);
	std::cout << std::endl;
}

int main()
{
	rand_seed();
	vector<int> v(8);
	for (size_t i = 0; i < v.size(); i++)
		v[i] = rand_int(1, 100);
	print(v);
	merge_sort(v, 0, v.size() - 1);
	print(v);

	return 0;
}
